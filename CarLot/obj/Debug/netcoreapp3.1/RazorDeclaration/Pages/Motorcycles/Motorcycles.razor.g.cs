#pragma checksum "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Motorcycles\Motorcycles.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a1e2b0ed5c3e1300515b6c199f19450bad37fb39"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace CarLot.Pages.Motorcycles
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using CarLot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using CarLot.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Motorcycles\Motorcycles.razor"
using CarLot.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Motorcycles\Motorcycles.razor"
using CarLot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Motorcycles\Motorcycles.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/motorcycles")]
    public partial class Motorcycles : OwningComponentBase<MotorcycleService>, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 410 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Motorcycles\Motorcycles.razor"
 
    public List<Motorcycle> motorcycles { get; set; } = new List<Motorcycle>();
    public List<Motorcycle> allMotorcycles { get; set; } = new List<Motorcycle>();
    public CarLot.Models.Motorcycle Model = new CarLot.Models.Motorcycle();
    public byte[] ImgUploaded { get; set; }
    protected bool[] boolItems =
           {
                true,
                false
            };
    public int motorcycleToDelete;





    string motorcycleMake = "";
    string motorcyclePrice = "";
    string motorcycleMileage = "";
    int? motorcycleYear = 0;
    string motorcycleBodyStyle = "";
    string motorcycleExtColor = "";
    string motorcycleDrivetrain = "";
    string motorcycleTransmission = "";
    string motorcycleCylinder = "";
    string motorcycleFuel = "";
    string motorcycleSearchString = "";

    string SearchTerm { get; set; } = "";

    public List<Motorcycle> SearchMotorcyclesItems { get; set; } = new List<Motorcycle>();
    public List<Motorcycle> FilteredMotorcycles => SearchMotorcyclesItems.Where(i => i.Make.ToLower().Contains(SearchTerm.ToLower())).ToList();



    protected override async Task OnInitializedAsync()
    {
        motorcycles = await motorcycleService.GetMotorcyclesAsync();
        allMotorcycles = await motorcycleService.GetMotorcyclesAsync();
        SearchMotorcyclesItems = await motorcycleService.GetMotorcyclesAsync();

        GetQueryStringValues();
        NavManager.LocationChanged += HandleLocationChanged;

        if (motorcycleMake != null || motorcyclePrice != null || motorcycleMileage != null
        || motorcycleYear != null || motorcycleBodyStyle != null || motorcycleExtColor != null || motorcycleDrivetrain != null || motorcycleTransmission != null
        || motorcycleCylinder != null || motorcycleFuel != null || motorcycleSearchString != null)
        {
            motorcycles = await motorcycleService.GetFilteredMotorcycles(motorcycleMake, motorcyclePrice, motorcycleMileage, motorcycleYear, motorcycleBodyStyle, motorcycleExtColor, motorcycleDrivetrain, motorcycleTransmission, motorcycleCylinder, motorcycleFuel, motorcycleSearchString);
            allMotorcycles = await motorcycleService.GetFilteredMotorcycles(motorcycleMake, motorcyclePrice, motorcycleMileage, motorcycleYear, motorcycleBodyStyle, motorcycleExtColor, motorcycleDrivetrain, motorcycleTransmission, motorcycleCylinder, motorcycleFuel, motorcycleSearchString);

        }

    }

    public async Task SearchTextTab(MouseEventArgs e, string motorcycleMake, string motorcyclePrice,
        string motorcycleMileage, int? motorcycleYear, string motorcycleBodyStyle,
        string motorcycleDrivetrain, string motorcycleTransmission, string motorcycleCylinder,
        string motorcycleFuel, string motorcycleSearchString)
    {


        motorcycles = await motorcycleService.GetFilteredMotorcycles(motorcycleMake, motorcyclePrice, motorcycleMileage,
        motorcycleYear, motorcycleBodyStyle,motorcycleExtColor , motorcycleDrivetrain, motorcycleTransmission,
        motorcycleCylinder, motorcycleFuel, motorcycleSearchString);
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        GetQueryStringValues();
        StateHasChanged();
    }

    void GetQueryStringValues()
    {
        NavManager.TryGetQueryString<string>("motorcycleMake", out motorcycleMake);
        NavManager.TryGetQueryString<string>("motorcyclePrice", out motorcyclePrice);
        NavManager.TryGetQueryString<string>("motorcycleMileage", out motorcycleMileage);
        NavManager.TryGetQueryString<int?>("motorcycleYear", out motorcycleYear);
        NavManager.TryGetQueryString<string>("motorcycleBodyStyle", out motorcycleBodyStyle);
        NavManager.TryGetQueryString<string>("motorcycleExtColor", out motorcycleExtColor);
        NavManager.TryGetQueryString<string>("motorcycleDrivetrain", out motorcycleDrivetrain);
        NavManager.TryGetQueryString<string>("motorcycleTransmission", out motorcycleTransmission);
        NavManager.TryGetQueryString<string>("motorcycleCylinder", out motorcycleCylinder);
        NavManager.TryGetQueryString<string>("motorcycleFuel", out motorcycleFuel);
        NavManager.TryGetQueryString<string>("motorcycleSearchString", out motorcycleSearchString);
    }


    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    void ReturnMotorcyclesByMake(ChangeEventArgs e)
    {
        motorcycleMake = e.Value.ToString();
    }

    void ReturnMotorcyclesByPrice(ChangeEventArgs e)
    {
        motorcyclePrice = e.Value.ToString();
    }

    void ReturnMotorcyclesByMileage(ChangeEventArgs e)
    {
        motorcycleMileage = e.Value.ToString();
    }

    void ReturnMotorcyclesByYear(ChangeEventArgs e)
    {
        motorcycleYear = int.Parse(e.Value.ToString());
    }

    void ReturnMotorcyclesByBodyStyle(ChangeEventArgs e)
    {
        motorcycleBodyStyle = e.Value.ToString();
    }

    void ReturnMotorcyclesByExtColor(ChangeEventArgs e)
    {
        motorcycleExtColor = e.Value.ToString();
    }

    void ReturnMotorcyclesByDrivetrain(ChangeEventArgs e)
    {
        motorcycleDrivetrain = e.Value.ToString();
    }

    void ReturnMotorcyclesByTransmission(ChangeEventArgs e)
    {
        motorcycleTransmission = e.Value.ToString();
    }

    void ReturnMotorcyclesByCylinder(ChangeEventArgs e)
    {
        motorcycleCylinder = e.Value.ToString();
    }

    void ReturnMotorcyclesByFuel(ChangeEventArgs e)
    {
        motorcycleFuel = e.Value.ToString();
    }




    public async Task FilterClick(MouseEventArgs e, string motorcycleMake,
                                         string motorcyclePrice, string motorcycleMileage, int? carYear,
                                         string motorcycleBodyStyle, string motorcycleExColor,
                                         string motorcycleDrivetrain, string carTransmission, string carCylinder,
                                         string motorcycleFuel, string motorcycleSearchString)
    {

        motorcycles = await motorcycleService.GetFilteredMotorcycles(motorcycleMake, motorcyclePrice, motorcycleMileage, motorcycleYear, motorcycleBodyStyle, motorcycleExColor, motorcycleDrivetrain, motorcycleTransmission, motorcycleCylinder, motorcycleFuel, motorcycleSearchString);
        allMotorcycles = await motorcycleService.GetFilteredMotorcycles(motorcycleMake, motorcyclePrice, motorcycleMileage, motorcycleYear, motorcycleBodyStyle, motorcycleExColor, motorcycleDrivetrain, motorcycleTransmission, motorcycleCylinder, motorcycleFuel, motorcycleSearchString);
    }

    public async Task BackToFullList(MouseEventArgs e)
    {

        SearchTerm = "";
        allMotorcycles = await motorcycleService.GetMotorcyclesAsync();
        motorcycles = await motorcycleService.GetMotorcyclesAsync();
    }


    async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            ImgUploaded = ms.ToArray();
        }
    }

    public async Task SaveMotorcycle(string modalId)
    {
        if (Model.MotorcycleId == 0)
        {

            // id zero represents new item
            Model.CreatedDate = DateTime.Now;
            Model.Image = ImgUploaded;
            await motorcycleService.AddMotorcycleAsync(Model);
            motorcycles = await motorcycleService.GetMotorcyclesAsync();

        }
        else
        {
            Model.ModifiedDate = DateTime.Now;
            Model.Image = ImgUploaded;
            var motorcycleToUpdate = await motorcycleService.UpdateMotorcycleAsync(Model.MotorcycleId);
            motorcycles.Where(_ => _.MotorcycleId == Model.MotorcycleId).FirstOrDefault();
            motorcycles.Add(motorcycleToUpdate);
            motorcycles = await motorcycleService.GetMotorcyclesAsync();
        }
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);

    }

    public async Task ConfirmDelete(string modalId)
    {
        var motorcycleTodelete = motorcycles.Where(_ => _.MotorcycleId == motorcycleToDelete).FirstOrDefault();
        await motorcycleService.DeleteMotorcycleAsync(motorcycleToDelete);
        motorcycles.Remove(motorcycleTodelete);
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);
    }

    public async Task OpenModal(string modalId, int itemMotorcycleId)
    {
        if (itemMotorcycleId == 0)
        {
            Model = new CarLot.Models.Motorcycle();

        }
        else
        {
            Model = motorcycles.Where(_ => _.MotorcycleId == itemMotorcycleId).FirstOrDefault();
        }

        await _jsRuntime.InvokeVoidAsync("global.openModal", modalId);
    }





#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<ApplicationUser> UserManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SignInManager<ApplicationUser> SignInManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime _jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CarLot.Data.MotorcycleService motorcycleService { get; set; }
    }
}
#pragma warning restore 1591
