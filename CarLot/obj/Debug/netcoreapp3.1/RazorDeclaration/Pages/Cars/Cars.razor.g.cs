#pragma checksum "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Cars\Cars.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6f8246e601b75356ccd8ee45f27b7aa3f22bd83d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace CarLot.Pages.Cars
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using CarLot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using CarLot.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Cars\Cars.razor"
using CarLot.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Cars\Cars.razor"
using CarLot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Cars\Cars.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/cars")]
    public partial class Cars : OwningComponentBase<CarService>, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 446 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Cars\Cars.razor"
 
    public List<Car> cars { get; set; } = new List<Car>();
    public List<Car> allCars { get; set; } = new List<Car>();
    public CarLot.Models.Car Model = new CarLot.Models.Car();
    public byte[] ImgUploaded { get; set; }
    protected bool[] boolItems =
           {
                true,
                false
            };
    public int carToDelete;





    string carMake = "";
    string carPrice = "";
    string carMileage = "";
    int? carYear = 0;
    string carBodyStyle = "";
    string carExColor = "";
    string carIntColor = "";
    string carDrivetrain = "";
    string carTransmission = "";
    string carCylinder = "";
    string carFuel = "";
    string carDoorCount = "";
    string carSearchString = "";

    string SearchTerm { get; set; } = "";

    public List<Car> SearchCarsItems { get; set; } = new List<Car>();
    public List<Car> FilteredCars => SearchCarsItems.Where(i => i.Make.ToLower().Contains(SearchTerm.ToLower())).ToList();



    protected override async Task OnInitializedAsync()
    {
        cars = await carService.GetCarsAsync();
        allCars = await carService.GetCarsAsync();
        SearchCarsItems = await carService.GetCarsAsync();

        GetQueryStringValues();
        NavManager.LocationChanged += HandleLocationChanged;

        if (carMake != null || carPrice != null || carMileage != null
        || carYear != null || carBodyStyle != null || carExColor != null
        || carIntColor != null || carDrivetrain != null || carTransmission != null
        || carCylinder != null || carFuel != null || carDoorCount != null || carSearchString != null)
        {
            cars = await carService.GetFilteredCars(carMake, carPrice, carMileage, carYear, carBodyStyle, carExColor, carIntColor, carDrivetrain, carTransmission, carCylinder, carFuel, carDoorCount, carSearchString);
            allCars = await carService.GetFilteredCars(carMake, carPrice, carMileage, carYear, carBodyStyle, carExColor, carIntColor, carDrivetrain, carTransmission, carCylinder, carFuel, carDoorCount, carSearchString);

        }

    }

    public async Task SearchTextTab(MouseEventArgs e, string carMake, string carPrice,
        string carMileage, int? carYear, string carBodyStyle, string carExColor,
        string carIntColor, string carDrivetrain, string carTransmission, string carCylinder,
        string carFuel, string carDoorCount, string carSearchString)
    {


        cars = await carService.GetFilteredCars(carMake, carPrice, carMileage,
            carYear, carBodyStyle, carExColor, carIntColor, carDrivetrain, carTransmission,
            carCylinder, carFuel, carDoorCount, carSearchString);
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        GetQueryStringValues();
        StateHasChanged();
    }

    void GetQueryStringValues()
    {
        NavManager.TryGetQueryString<string>("carMake", out carMake);
        NavManager.TryGetQueryString<string>("carPrice", out carPrice);
        NavManager.TryGetQueryString<string>("carMileage", out carMileage);
        NavManager.TryGetQueryString<int?>("carYear", out carYear);
        NavManager.TryGetQueryString<string>("carBodyStyle", out carBodyStyle);
        NavManager.TryGetQueryString<string>("carExColor", out carExColor);
        NavManager.TryGetQueryString<string>("carIntColor", out carIntColor);
        NavManager.TryGetQueryString<string>("carDrivetrain", out carDrivetrain);
        NavManager.TryGetQueryString<string>("carTransmission", out carTransmission);
        NavManager.TryGetQueryString<string>("carCylinder", out carCylinder);
        NavManager.TryGetQueryString<string>("carFuel", out carFuel);
        NavManager.TryGetQueryString<string>("carDoorCount", out carDoorCount);
        NavManager.TryGetQueryString<string>("carSearchString", out carSearchString);
    }


    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    void ReturnCarsByMake(ChangeEventArgs e)
    {
        carMake = e.Value.ToString();
    }

    void ReturnCarsByPrice(ChangeEventArgs e)
    {
        carPrice = e.Value.ToString();
    }

    void ReturnCarsByMileage(ChangeEventArgs e)
    {
        carMileage = e.Value.ToString();
    }

    void ReturnCarsByYear(ChangeEventArgs e)
    {
        carYear = int.Parse(e.Value.ToString());
    }

    void ReturnCarsByBodyStyle(ChangeEventArgs e)
    {
        carBodyStyle = e.Value.ToString();
    }

    void ReturnCarsByExColor(ChangeEventArgs e)
    {
        carExColor = e.Value.ToString();
    }

    void ReturnCarsByIntColor(ChangeEventArgs e)
    {
        carIntColor = e.Value.ToString();
    }

    void ReturnCarsByDrivetrain(ChangeEventArgs e)
    {
        carDrivetrain = e.Value.ToString();
    }

    void ReturnCarsByTransmission(ChangeEventArgs e)
    {
        carTransmission = e.Value.ToString();
    }

    void ReturnCarsByCylinder(ChangeEventArgs e)
    {
        carCylinder = e.Value.ToString();
    }

    void ReturnCarsByFuel(ChangeEventArgs e)
    {
        carFuel = e.Value.ToString();
    }

    void ReturnCarsByDoorCount(ChangeEventArgs e)
    {
        carDoorCount = e.Value.ToString();
    }



    public async Task FilterClick(MouseEventArgs e, string carMake,
                                         string carPrice, string carMileage, int? carYear,
                                         string carBodyStyle, string carExColor, string carIntColor,
                                         string carDrivetrain, string carTransmission, string carCylinder,
                                         string carFuel, string carDoorCount, string carSearchString)
    {

        cars = await carService.GetFilteredCars(carMake, carPrice, carMileage, carYear, carBodyStyle, carExColor, carIntColor, carDrivetrain, carTransmission, carCylinder, carFuel, carDoorCount, carSearchString);
        allCars = await carService.GetFilteredCars(carMake, carPrice, carMileage, carYear, carBodyStyle, carExColor, carIntColor, carDrivetrain, carTransmission, carCylinder, carFuel, carDoorCount, carSearchString);
    }

    public async Task BackToFullList(MouseEventArgs e)
    {

        SearchTerm = "";
        allCars = await carService.GetCarsAsync();
        cars = await carService.GetCarsAsync();
    }


    async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            ImgUploaded = ms.ToArray();
        }
    }

    public async Task SaveCar(string modalId)
    {
        if (Model.CarId == 0)
        {

            // id zero represents new item
            Model.CreatedDate = DateTime.Now;
            Model.Image = ImgUploaded;
            await carService.AddCarAsync(Model);
            cars = await carService.GetCarsAsync();

        }
        else
        {
            Model.ModifiedDate = DateTime.Now;
            Model.Image = ImgUploaded;
            var carToUpdate = await carService.UpdateCarAsync(Model.CarId);
            cars.Where(_ => _.CarId == Model.CarId).FirstOrDefault();
            cars.Add(carToUpdate);
            cars = await carService.GetCarsAsync();
        }
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);

    }

    public async Task ConfirmDelete(string modalId)
    {
        var carTodelete = cars.Where(_ => _.CarId == carToDelete).FirstOrDefault();
        await carService.DeleteCarAsync(carToDelete);
        cars.Remove(carTodelete);
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);
    }

    public async Task OpenModal(string modalId, int itemCarId)
    {
        if (itemCarId == 0)
        {
            Model = new CarLot.Models.Car();

        }
        else
        {
            Model = cars.Where(_ => _.CarId == itemCarId).FirstOrDefault();
        }

        await _jsRuntime.InvokeVoidAsync("global.openModal", modalId);
    }





#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<ApplicationUser> UserManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SignInManager<ApplicationUser> SignInManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime _jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CarLot.Data.CarService carService { get; set; }
    }
}
#pragma warning restore 1591
