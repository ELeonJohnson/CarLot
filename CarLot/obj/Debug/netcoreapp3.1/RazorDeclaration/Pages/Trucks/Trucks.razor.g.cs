#pragma checksum "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Trucks\Trucks.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5dd7e3fa1a3761eda3c04ff938e16478d13312a8"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace CarLot.Pages.Trucks
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using CarLot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using CarLot.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Trucks\Trucks.razor"
using CarLot.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Trucks\Trucks.razor"
using CarLot.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Trucks\Trucks.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/trucks")]
    public partial class Trucks : OwningComponentBase<TruckService>, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 446 "C:\Users\Enoch\Desktop\Projects For Portfolio\CarLot\CarLot\Pages\Trucks\Trucks.razor"
 
    public List<Truck> trucks { get; set; } = new List<Truck>();
    public List<Truck> allTrucks { get; set; } = new List<Truck>();
    public CarLot.Models.Truck Model = new CarLot.Models.Truck();
    public byte[] ImgUploaded { get; set; }
    protected bool[] boolItems =
           {
                true,
                false
            };
    public int truckToDelete;





    string truckMake = "";
    string truckPrice = "";
    string truckMileage = "";
    int? truckYear = 0;
    string truckBodyStyle = "";
    string truckExColor = "";
    string truckIntColor = "";
    string truckDrivetrain = "";
    string truckTransmission = "";
    string truckCylinder = "";
    string truckFuel = "";
    string truckDoorCount = "";
    string truckSearchString = "";

    string SearchTerm { get; set; } = "";

    public List<Truck> SearchTrucksItems { get; set; } = new List<Truck>();
    public List<Truck> FilteredTrucks => SearchTrucksItems.Where(i => i.Make.ToLower().Contains(SearchTerm.ToLower())).ToList();



    protected override async Task OnInitializedAsync()
    {
        trucks = await truckService.GetTrucksAsync();
        allTrucks = await truckService.GetTrucksAsync();
        SearchTrucksItems = await truckService.GetTrucksAsync();

        GetQueryStringValues();
        NavManager.LocationChanged += HandleLocationChanged;

        if (truckMake != null || truckPrice != null || truckMileage != null
        || truckYear != null || truckBodyStyle != null || truckExColor != null
        || truckIntColor != null || truckDrivetrain != null || truckTransmission != null
        || truckCylinder != null || truckFuel != null || truckDoorCount != null || truckSearchString != null)
        {
            trucks = await truckService.GetFilteredTrucks(truckMake, truckPrice, truckMileage, truckYear, truckBodyStyle, truckExColor, truckIntColor, truckDrivetrain, truckTransmission, truckCylinder, truckFuel, truckDoorCount, truckSearchString);
            allTrucks = await truckService.GetFilteredTrucks(truckMake, truckPrice, truckMileage, truckYear, truckBodyStyle, truckExColor, truckIntColor, truckDrivetrain, truckTransmission, truckCylinder, truckFuel, truckDoorCount, truckSearchString);

        }

    }

    public async Task SearchTextTab(MouseEventArgs e, string truckMake, string truckPrice,
        string truckMileage, int? truckYear, string truckBodyStyle, string truckExColor,
        string truckIntColor, string truckDrivetrain, string truckTransmission, string truckCylinder,
        string truckFuel, string truckDoorCount, string truckSearchString)
    {


        trucks = await truckService.GetFilteredTrucks(truckMake, truckPrice, truckMileage,
            truckYear, truckBodyStyle, truckExColor, truckIntColor, truckDrivetrain, truckTransmission,
            truckCylinder, truckFuel, truckDoorCount, truckSearchString);
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        GetQueryStringValues();
        StateHasChanged();
    }

    void GetQueryStringValues()
    {
        NavManager.TryGetQueryString<string>("truckMake", out truckMake);
        NavManager.TryGetQueryString<string>("truckPrice", out truckPrice);
        NavManager.TryGetQueryString<string>("truckMileage", out truckMileage);
        NavManager.TryGetQueryString<int?>("truckYear", out truckYear);
        NavManager.TryGetQueryString<string>("truckBodyStyle", out truckBodyStyle);
        NavManager.TryGetQueryString<string>("truckExColor", out truckExColor);
        NavManager.TryGetQueryString<string>("truckIntColor", out truckIntColor);
        NavManager.TryGetQueryString<string>("truckDrivetrain", out truckDrivetrain);
        NavManager.TryGetQueryString<string>("truckTransmission", out truckTransmission);
        NavManager.TryGetQueryString<string>("truckCylinder", out truckCylinder);
        NavManager.TryGetQueryString<string>("truckFuel", out truckFuel);
        NavManager.TryGetQueryString<string>("truckDoorCount", out truckDoorCount);
        NavManager.TryGetQueryString<string>("truckSearchString", out truckSearchString);
    }


    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    void ReturnTrucksByMake(ChangeEventArgs e)
    {
        truckMake = e.Value.ToString();
    }

    void ReturnTrucksByPrice(ChangeEventArgs e)
    {
        truckPrice = e.Value.ToString();
    }

    void ReturnTrucksByMileage(ChangeEventArgs e)
    {
        truckMileage = e.Value.ToString();
    }

    void ReturnTrucksByYear(ChangeEventArgs e)
    {
        truckYear = int.Parse(e.Value.ToString());
    }

    void ReturnTrucksByBodyStyle(ChangeEventArgs e)
    {
        truckBodyStyle = e.Value.ToString();
    }

    void ReturnTrucksByExColor(ChangeEventArgs e)
    {
        truckExColor = e.Value.ToString();
    }

    void ReturnTrucksByIntColor(ChangeEventArgs e)
    {
        truckIntColor = e.Value.ToString();
    }

    void ReturnTrucksByDrivetrain(ChangeEventArgs e)
    {
        truckDrivetrain = e.Value.ToString();
    }

    void ReturnTrucksByTransmission(ChangeEventArgs e)
    {
        truckTransmission = e.Value.ToString();
    }

    void ReturnTrucksByCylinder(ChangeEventArgs e)
    {
        truckCylinder = e.Value.ToString();
    }

    void ReturnTrucksByFuel(ChangeEventArgs e)
    {
        truckFuel = e.Value.ToString();
    }

    void ReturnTrucksByDoorCount(ChangeEventArgs e)
    {
        truckDoorCount = e.Value.ToString();
    }



    public async Task FilterClick(MouseEventArgs e, string truckMake,
                                         string truckPrice, string truckMileage, int? truckYear,
                                         string truckBodyStyle, string truckExColor, string truckIntColor,
                                         string truckDrivetrain, string truckTransmission, string truckCylinder,
                                         string truckFuel, string truckDoorCount, string truckSearchString)
    {

        trucks = await truckService.GetFilteredTrucks(truckMake, truckPrice, truckMileage, truckYear, truckBodyStyle, truckExColor, truckIntColor, truckDrivetrain, truckTransmission, truckCylinder, truckFuel, truckDoorCount, truckSearchString);
        allTrucks = await truckService.GetFilteredTrucks(truckMake, truckPrice, truckMileage, truckYear, truckBodyStyle, truckExColor, truckIntColor, truckDrivetrain, truckTransmission, truckCylinder, truckFuel, truckDoorCount, truckSearchString);
    }

    public async Task BackToFullList(MouseEventArgs e)
    {

        SearchTerm = "";
        allTrucks = await truckService.GetTrucksAsync();
        trucks = await truckService.GetTrucksAsync();
    }


    async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            ImgUploaded = ms.ToArray();
        }
    }

    public async Task SaveTruck(string modalId)
    {
        if (Model.TruckId == 0)
        {

            // id zero represents new item
            Model.CreatedDate = DateTime.Now;
            Model.Image = ImgUploaded;
            await truckService.AddTruckAsync(Model);
            trucks = await truckService.GetTrucksAsync();

        }
        else
        {
            Model.ModifiedDate = DateTime.Now;
            Model.Image = ImgUploaded;
            var truckToUpdate = await truckService.UpdateTruckAsync(Model.TruckId);
            trucks.Where(_ => _.TruckId == Model.TruckId).FirstOrDefault();
            trucks.Add(truckToUpdate);
            trucks = await truckService.GetTrucksAsync();
        }
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);

    }

    public async Task ConfirmDelete(string modalId)
    {
        var truckTodelete = trucks.Where(_ => _.TruckId == truckToDelete).FirstOrDefault();
        await truckService.DeleteTruckAsync(truckToDelete);
        trucks.Remove(truckTodelete);
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);
    }

    public async Task OpenModal(string modalId, int itemTruckId)
    {
        if (itemTruckId == 0)
        {
            Model = new CarLot.Models.Truck();

        }
        else
        {
            Model = trucks.Where(_ => _.TruckId == itemTruckId).FirstOrDefault();
        }

        await _jsRuntime.InvokeVoidAsync("global.openModal", modalId);
    }





#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<ApplicationUser> UserManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SignInManager<ApplicationUser> SignInManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime _jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CarLot.Data.TruckService truckService { get; set; }
    }
}
#pragma warning restore 1591
