@page "/motorcycles"
@using CarLot.Data
@using CarLot.Models
@inject CarLot.Data.MotorcycleService motorcycleService
@inject IJSRuntime _jsRuntime
@inherits OwningComponentBase<MotorcycleService>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@implements IDisposable
@inject NavigationManager NavManager

<link href="./styles/Motorcycles/MotorcycleIndexStyling.css" rel="stylesheet" />


<div id="ad-1">
    <img src="/images/bus-index-ad.jpg" />
</div>

<h1 id="motorcycles-for-sale">New & Used Motorcycles For Sale</h1>

@if (motorcycles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView>
        <Authorized>
            <div>
                <MatButton Id="add-motorcycle-btn" Raised="true" TrailingIcon="directions_bike" Type="button" @onclick='@(e => OpenModal("motorcycleModal",0))'>Add</MatButton>
            </div>
        </Authorized>
        <NotAuthorized>
            <div id="not-auth">
                <p>
                    <NavLink class="nav-link" href="Identity/Account/Register">Sign Up</NavLink>
                    Or
                    <NavLink class="nav-link" href="Identity/Account/Login">Login</NavLink>
                    To Add A Motorcycle
                </p>
            </div>
        </NotAuthorized>
    </AuthorizeView>

    <div class="row">
        <div class="col" id="filter-col">
            <nav>
                <div class="nav nav-tabs" id="nav-tab" role="tablist">
                    <a class="nav-item nav-link active" id="nav-dropdown-tab" data-toggle="tab" href="#nav-dropdown" role="tab" aria-controls="nav-dropdown" aria-selected="true">Dropdown Search</a>
                    <a class="nav-item nav-link" id="nav-text-tab" data-toggle="tab" href="#nav-text" role="tab" aria-controls="nav-text" aria-selected="false">Type Search</a>
                </div>
            </nav>
            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane fade show active" id="nav-dropdown" role="tabpanel" aria-labelledby="nav-dropdown-tab">
                    <EditForm Model="@allMotorcycles">
                        <div class="row">
                            <div class="col">
                                <div>
                                    <span id="filter-count">@allMotorcycles.Count</span>
                                    <span id="filter-results">Results</span>
                                </div>
                                <div class="form-group">
                                    <label>Makes</label>
                                    <select @onchange="@ReturnMotorcyclesByMake" class="form-control">
                                        <option disabled>Select By Makes</option>
                                        @foreach (var motorcycleMake in allMotorcycles)
                                        {
                                            <option value="@motorcycleMake.Make">@motorcycleMake.Make</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Prices</label>
                                    <select @onchange="@ReturnMotorcyclesByPrice" class="form-control">
                                        <option disabled>Select By Prices</option>
                                        @foreach (var motorcyclePrice in allMotorcycles)
                                        {
                                            <option value="@motorcyclePrice.Price">@motorcyclePrice.Price</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Mileages</label>
                                    <select @onchange="@ReturnMotorcyclesByMileage" class="form-control">
                                        <option disabled>Select By Mileage</option>
                                        @foreach (var motorcycleMileage in allMotorcycles)
                                        {
                                            <option value="@motorcycleMileage.Mileage">@motorcycleMileage.Mileage</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Years</label>
                                    <select @onchange="@ReturnMotorcyclesByYear" class="form-control">
                                        <option disabled>Select By Years</option>
                                        @foreach (var motorcycleYear in allMotorcycles)
                                        {
                                            <option value="@motorcycleYear.Year">@motorcycleYear.Year</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Body Styles</label>
                                    <select @onchange="@ReturnMotorcyclesByBodyStyle" class="form-control">
                                        <option disabled>Select By Body Styles</option>
                                        @foreach (var motorcycleBodyStyle in allMotorcycles)
                                        {
                                            <option value="@motorcycleBodyStyle.BodyStyle">@motorcycleBodyStyle.BodyStyle</option>
                                        }
                                    </select>
                                </div>
                              
                     
                                <div class="form-group">
                                    <label>Drivetrains</label>
                                    <select @onchange="@ReturnMotorcyclesByDrivetrain" class="form-control">
                                        <option disabled>Select By Drivetrains</option>
                                        @foreach (var motorcycleDrivetrain in allMotorcycles)
                                        {
                                            <option value="@motorcycleDrivetrain.DriveTrain">@motorcycleDrivetrain.DriveTrain</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Transmissions</label>
                                    <select @onchange="@ReturnMotorcyclesByTransmission" class="form-control">
                                        <option disabled>Select By Transmissions</option>
                                        @foreach (var motorcycleTransmission in allMotorcycles)
                                        {
                                            <option value="@motorcycleTransmission.Transmission">@motorcycleTransmission.Transmission</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Cylinders</label>
                                    <select @onchange="@ReturnMotorcyclesByCylinder" class="form-control">
                                        <option disabled>Select By Cylinders</option>
                                        @foreach (var motorcycleCylinder in allMotorcycles)
                                        {
                                            <option value="@motorcycleCylinder.Cylinders">@motorcycleCylinder.Cylinders</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Fuels</label>
                                    <select @onchange="@ReturnMotorcyclesByFuel" class="form-control">
                                        <option disabled>Select By Fuels</option>
                                        @foreach (var motorcycleFuel in allMotorcycles)
                                        {
                                            <option value="@motorcycleFuel.Fuel">@motorcycleFuel.Fuel</option>
                                        }
                                    </select>
                                </div>
                   
                                <a @onclick="@(e => FilterClick(e, motorcycleMake, motorcyclePrice, motorcycleMileage, motorcycleYear,motorcycleBodyStyle, motorcycleExtColor, motorcycleDrivetrain, motorcycleTransmission, motorcycleCylinder, motorcycleFuel, motorcycleSearchString))" href="@($"motorcycles?motorcycleMake={motorcycleMake}&motorcyclePrice={motorcyclePrice}&motorcycleMileage={motorcycleMileage}&motorcycleYear={motorcycleYear}&motorcycleExt={motorcycleExtColor}&motorcycleBodyStyle={motorcycleBodyStyle}&motorcycleDrivetrain={motorcycleDrivetrain}&motorcycleTransmission={motorcycleTransmission}&motorcycleCylinder={motorcycleCylinder}&motorcycleFuel={motorcycleFuel}&motorcycleSearchString={motorcycleSearchString}")" class="btn">Search</a>
                                <a @onclick="@(e => BackToFullList(e))" href="@($"motorcycles")" class="btn">Back To Full List</a>
                            </div>
                        </div>
                    </EditForm>
                </div>
                <div class="tab-pane fade" id="nav-text" role="tabpanel" aria-labelledby="nav-text-tab">
                    <div class="form-group">
                        <input placeholder="Search By Makes" @bind-value="SearchTerm" @bind-value:event="oninput" />
                        <a @onclick="@(e => SearchTextTab(e, SearchTerm, motorcyclePrice, motorcycleMileage, motorcycleYear, motorcycleBodyStyle, motorcycleDrivetrain, motorcycleTransmission, motorcycleCylinder, motorcycleFuel, motorcycleSearchString))" href="@($"motorcycles?motorcycleMake={SearchTerm}&motorcyclePrice={motorcyclePrice}&motorcycleMileage={motorcycleMileage}&motorcycleYear={motorcycleYear}&motorcycleBodyStyle={motorcycleBodyStyle}&motorcycleDrivetrain={motorcycleDrivetrain}&motorcycleTransmission={motorcycleTransmission}&motorcycleCylinder={motorcycleCylinder}&motorcycleFuel={motorcycleFuel}&motorcycleSearchString={motorcycleSearchString}")" class="btn">Search</a>
                    </div>
                    <br />
                    <span class="text-muted ml-5">
                        Showing @FilteredMotorcycles.Count out of @FilteredMotorcycles.Count
                    </span>
                    <br />
                    <h4 class="mt-4">List Of Motorcycle Makes</h4>
                    <ul>
                        @foreach (var motorcycleMake in FilteredMotorcycles)
                        {
                            <li>@motorcycleMake.Make</li>
                        }
                    </ul>
                    <a id="back-to" @onclick="@(e => BackToFullList(e))" href="@($"motorcycles")" class="btn">Back To Full List</a>
                </div>
            </div>
        </div>
        <div class="col" id="listing-col">
            @foreach (var motorcycle in motorcycles)
            {
                <div class="card">
                    <div class="row no-gutters">
                        <div class="col-md-5">
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(motorcycle.Image)" class="card-img">
                        </div>
                        <div class="col-md-7">
                            <div class="card-body">
                                <div id="isNew">
                                    @if (motorcycle.New == true)
                                    {
                                        <p class="card-text">
                                            NEW
                                        </p>
                                    }
                                    else
                                    {
                                        <p class="card-text">
                                            USED
                                        </p>
                                    }
                                </div>
                                <h5 class="card-title">@motorcycle.Year @motorcycle.Make</h5>
                                <p class="card-text" id="mileage">@motorcycle.Mileage mi.</p>
                                <h1 id="price" class="card-title">$@motorcycle.Price</h1>
                                <div id="delivery">
                                    @if (motorcycle.VirtualAppointments == true)
                                    {
                                        <span class="card-text">Virtual Appointments</span>
                                    }
                                    @if (motorcycle.HomeDelivery == true)
                                    {
                                        <span class="card-text">Home Delivery</span>
                                    }
                                </div>
                                <div id="row-within-card" class="row">
                                    <div class="col">
                                        <p class="card-text"><strong>Ext. Color:</strong> @motorcycle.ExteriorColor</p>
                                    </div>
                                    <div class="col">
                                        <p class="card-text"><strong>Transmission:</strong> @motorcycle.Transmission</p>
                                        <p class="card-text"><strong>Drivetrain:</strong> @motorcycle.DriveTrain</p>
                                    </div>
                                </div>
                                <div id="more-details">
                                    <p class="card-text">@motorcycle.ApplicationUser.FirstName Of @motorcycle.ApplicationUser.City, @motorcycle.ApplicationUser.State</p>
                                </div>
                                <div id="details-btn">
                                    <a href="@($"motorcycle/details/{motorcycle.MotorcycleId}")" class="btn btn-block">More Details</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}




<div>
    <div class="modal fade" id="motorcycleModal" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Motorcycle's Information</h5>
                    <MatButton Raised="true" Type="button" data-dismiss="modal" aria-label="Close">X</MatButton>
                </div>
                <div class="modal-body">
                    <form enctype="multipart/form-data">
                        <input type="hidden" @bind="Model.MotorcycleId" id="motorcycleId">
                        <input type="hidden" @bind="Model.ApplicationUserId" id="applicationUserId">
                        <input type="hidden" @bind="Model.CreatedDate" id="createdDate">
                        <div class="row">
                            <div class="col">
                                <p>
                                    <MatTextField @bind-Value="Model.Make" Label="Make"></MatTextField>
                                </p>
                                <p>
                                    <MatTextField @bind-Value="Model.Price" Label="Price" Icon="attach_money"></MatTextField>
                                </p>
                                <p>
                                    <MatTextField @bind-Value="Model.Mileage" Label="Mileage"></MatTextField>
                                </p>
                                <p>
                                    <MatTextField @bind-Value="Model.DriveTrain" Label="Drivetrain"></MatTextField>
                                </p>
                            </div>
                            <div class="col">
                                <p>
                                    <MatTextField @bind-Value="Model.Transmission" Label="Transmission"></MatTextField>
                                </p>
                                <p>
                                    <MatTextField @bind-Value="Model.Cylinders" Label="Cylinders"></MatTextField>
                                </p>
                                <p>
                                    <MatTextField @bind-Value="Model.Fuel" Label="Fuel"></MatTextField>
                                </p>
                 
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>
                                    <MatTextField @bind-Value="Model.Features" Label="Features" TextArea="true" FullWidth="true"></MatTextField>
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>
                                    <MatTextField @bind-Value="Model.BodyStyle" Label="Body Style" TextArea="true" FullWidth="true"></MatTextField>
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <p>
                                    <MatTextField @bind-Value="Model.ExteriorColor" Label="Exterior Color" TextArea="true" FullWidth="true"></MatTextField>
                                </p>
                            </div>
                        </div>
                       
                        <div class="row">
                            <div class="col">
                                <p>
                                    <MatTextField @bind-Value="Model.SellerNotes" Label="Seller Notes" TextArea="true" FullWidth="true"></MatTextField>
                                </p>
                            </div>
                        </div>
                        <h2>Tell Us More About Your Motorcycle</h2>
                        <p id="p-apply-check">Please Check All That Applies To Your Motorcycle.</p>
                        <div class="row">
                            <div class="col">
                                <MatH5>Is Your Motorcycle Available For Home Delivery?</MatH5>
                                <MatRadioGroup @bind-Value="Model.HomeDelivery" Items="boolItems">

                                </MatRadioGroup>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <MatH5>Is Your Motorcycle Available For a Virtual Appointments?</MatH5>
                                <MatRadioGroup @bind-Value="Model.VirtualAppointments" Items="boolItems">

                                </MatRadioGroup>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <MatH5>Is Your Motorcycle New?</MatH5>
                                <MatRadioGroup @bind-Value="Model.New" Items="boolItems">

                                </MatRadioGroup>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">

                                <MatH5>Is Your Motorcycle Used?</MatH5>
                                <MatRadioGroup @bind-Value="Model.Used" Items="boolItems">

                                </MatRadioGroup>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <MatH5>Is Your Motorcycle Certified Preowned?</MatH5>
                                <MatRadioGroup @bind-Value="Model.CertifiedPreOwned" Items="boolItems">

                                </MatRadioGroup>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">

                                <h5>Motorcycle's Year?</h5>
                                <p>
                                    <MatTextField @bind-Value="Model.Year" Label="Year"></MatTextField>
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <MatH5>Motrocycle's Image</MatH5>
                                <InputFile multiple OnChange="HandleFileSelected" />
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <MatButton Raised="true" Type="button" data-dismiss="modal" aria-label="Close">Close</MatButton>
                    <MatButton Raised="true" Type="button" @onclick='@(e => SaveMotorcycle("motorcycleModal"))'>Save</MatButton>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteConfirmation" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Are You Sure You Want To Remove This Motorcycle?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick='@(e => ConfirmDelete("deleteConfirmation"))'>Ok</button>
            </div>
        </div>
    </div>
</div>





@code
{
    public List<Motorcycle> motorcycles { get; set; } = new List<Motorcycle>();
    public List<Motorcycle> allMotorcycles { get; set; } = new List<Motorcycle>();
    public CarLot.Models.Motorcycle Model = new CarLot.Models.Motorcycle();
    public byte[] ImgUploaded { get; set; }
    protected bool[] boolItems =
           {
                true,
                false
            };
    public int motorcycleToDelete;





    string motorcycleMake = "";
    string motorcyclePrice = "";
    string motorcycleMileage = "";
    int? motorcycleYear = 0;
    string motorcycleBodyStyle = "";
    string motorcycleExtColor = "";
    string motorcycleDrivetrain = "";
    string motorcycleTransmission = "";
    string motorcycleCylinder = "";
    string motorcycleFuel = "";
    string motorcycleSearchString = "";

    string SearchTerm { get; set; } = "";

    public List<Motorcycle> SearchMotorcyclesItems { get; set; } = new List<Motorcycle>();
    public List<Motorcycle> FilteredMotorcycles => SearchMotorcyclesItems.Where(i => i.Make.ToLower().Contains(SearchTerm.ToLower())).ToList();



    protected override async Task OnInitializedAsync()
    {
        motorcycles = await motorcycleService.GetMotorcyclesAsync();
        allMotorcycles = await motorcycleService.GetMotorcyclesAsync();
        SearchMotorcyclesItems = await motorcycleService.GetMotorcyclesAsync();

        GetQueryStringValues();
        NavManager.LocationChanged += HandleLocationChanged;

        if (motorcycleMake != null || motorcyclePrice != null || motorcycleMileage != null
        || motorcycleYear != null || motorcycleBodyStyle != null || motorcycleExtColor != null || motorcycleDrivetrain != null || motorcycleTransmission != null
        || motorcycleCylinder != null || motorcycleFuel != null || motorcycleSearchString != null)
        {
            motorcycles = await motorcycleService.GetFilteredMotorcycles(motorcycleMake, motorcyclePrice, motorcycleMileage, motorcycleYear, motorcycleBodyStyle, motorcycleExtColor, motorcycleDrivetrain, motorcycleTransmission, motorcycleCylinder, motorcycleFuel, motorcycleSearchString);
            allMotorcycles = await motorcycleService.GetFilteredMotorcycles(motorcycleMake, motorcyclePrice, motorcycleMileage, motorcycleYear, motorcycleBodyStyle, motorcycleExtColor, motorcycleDrivetrain, motorcycleTransmission, motorcycleCylinder, motorcycleFuel, motorcycleSearchString);

        }

    }

    public async Task SearchTextTab(MouseEventArgs e, string motorcycleMake, string motorcyclePrice,
        string motorcycleMileage, int? motorcycleYear, string motorcycleBodyStyle,
        string motorcycleDrivetrain, string motorcycleTransmission, string motorcycleCylinder,
        string motorcycleFuel, string motorcycleSearchString)
    {


        motorcycles = await motorcycleService.GetFilteredMotorcycles(motorcycleMake, motorcyclePrice, motorcycleMileage,
        motorcycleYear, motorcycleBodyStyle,motorcycleExtColor , motorcycleDrivetrain, motorcycleTransmission,
        motorcycleCylinder, motorcycleFuel, motorcycleSearchString);
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        GetQueryStringValues();
        StateHasChanged();
    }

    void GetQueryStringValues()
    {
        NavManager.TryGetQueryString<string>("motorcycleMake", out motorcycleMake);
        NavManager.TryGetQueryString<string>("motorcyclePrice", out motorcyclePrice);
        NavManager.TryGetQueryString<string>("motorcycleMileage", out motorcycleMileage);
        NavManager.TryGetQueryString<int?>("motorcycleYear", out motorcycleYear);
        NavManager.TryGetQueryString<string>("motorcycleBodyStyle", out motorcycleBodyStyle);
        NavManager.TryGetQueryString<string>("motorcycleExtColor", out motorcycleExtColor);
        NavManager.TryGetQueryString<string>("motorcycleDrivetrain", out motorcycleDrivetrain);
        NavManager.TryGetQueryString<string>("motorcycleTransmission", out motorcycleTransmission);
        NavManager.TryGetQueryString<string>("motorcycleCylinder", out motorcycleCylinder);
        NavManager.TryGetQueryString<string>("motorcycleFuel", out motorcycleFuel);
        NavManager.TryGetQueryString<string>("motorcycleSearchString", out motorcycleSearchString);
    }


    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    void ReturnMotorcyclesByMake(ChangeEventArgs e)
    {
        motorcycleMake = e.Value.ToString();
    }

    void ReturnMotorcyclesByPrice(ChangeEventArgs e)
    {
        motorcyclePrice = e.Value.ToString();
    }

    void ReturnMotorcyclesByMileage(ChangeEventArgs e)
    {
        motorcycleMileage = e.Value.ToString();
    }

    void ReturnMotorcyclesByYear(ChangeEventArgs e)
    {
        motorcycleYear = int.Parse(e.Value.ToString());
    }

    void ReturnMotorcyclesByBodyStyle(ChangeEventArgs e)
    {
        motorcycleBodyStyle = e.Value.ToString();
    }

    void ReturnMotorcyclesByExtColor(ChangeEventArgs e)
    {
        motorcycleExtColor = e.Value.ToString();
    }

    void ReturnMotorcyclesByDrivetrain(ChangeEventArgs e)
    {
        motorcycleDrivetrain = e.Value.ToString();
    }

    void ReturnMotorcyclesByTransmission(ChangeEventArgs e)
    {
        motorcycleTransmission = e.Value.ToString();
    }

    void ReturnMotorcyclesByCylinder(ChangeEventArgs e)
    {
        motorcycleCylinder = e.Value.ToString();
    }

    void ReturnMotorcyclesByFuel(ChangeEventArgs e)
    {
        motorcycleFuel = e.Value.ToString();
    }




    public async Task FilterClick(MouseEventArgs e, string motorcycleMake,
                                         string motorcyclePrice, string motorcycleMileage, int? carYear,
                                         string motorcycleBodyStyle, string motorcycleExColor,
                                         string motorcycleDrivetrain, string carTransmission, string carCylinder,
                                         string motorcycleFuel, string motorcycleSearchString)
    {

        motorcycles = await motorcycleService.GetFilteredMotorcycles(motorcycleMake, motorcyclePrice, motorcycleMileage, motorcycleYear, motorcycleBodyStyle, motorcycleExColor, motorcycleDrivetrain, motorcycleTransmission, motorcycleCylinder, motorcycleFuel, motorcycleSearchString);
        allMotorcycles = await motorcycleService.GetFilteredMotorcycles(motorcycleMake, motorcyclePrice, motorcycleMileage, motorcycleYear, motorcycleBodyStyle, motorcycleExColor, motorcycleDrivetrain, motorcycleTransmission, motorcycleCylinder, motorcycleFuel, motorcycleSearchString);
    }

    public async Task BackToFullList(MouseEventArgs e)
    {

        SearchTerm = "";
        allMotorcycles = await motorcycleService.GetMotorcyclesAsync();
        motorcycles = await motorcycleService.GetMotorcyclesAsync();
    }


    async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            ImgUploaded = ms.ToArray();
        }
    }

    public async Task SaveMotorcycle(string modalId)
    {
        if (Model.MotorcycleId == 0)
        {

            // id zero represents new item
            Model.CreatedDate = DateTime.Now;
            Model.Image = ImgUploaded;
            await motorcycleService.AddMotorcycleAsync(Model);
            motorcycles = await motorcycleService.GetMotorcyclesAsync();

        }
        else
        {
            Model.ModifiedDate = DateTime.Now;
            Model.Image = ImgUploaded;
            var motorcycleToUpdate = await motorcycleService.UpdateMotorcycleAsync(Model.MotorcycleId);
            motorcycles.Where(_ => _.MotorcycleId == Model.MotorcycleId).FirstOrDefault();
            motorcycles.Add(motorcycleToUpdate);
            motorcycles = await motorcycleService.GetMotorcyclesAsync();
        }
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);

    }

    public async Task ConfirmDelete(string modalId)
    {
        var motorcycleTodelete = motorcycles.Where(_ => _.MotorcycleId == motorcycleToDelete).FirstOrDefault();
        await motorcycleService.DeleteMotorcycleAsync(motorcycleToDelete);
        motorcycles.Remove(motorcycleTodelete);
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);
    }

    public async Task OpenModal(string modalId, int itemMotorcycleId)
    {
        if (itemMotorcycleId == 0)
        {
            Model = new CarLot.Models.Motorcycle();

        }
        else
        {
            Model = motorcycles.Where(_ => _.MotorcycleId == itemMotorcycleId).FirstOrDefault();
        }

        await _jsRuntime.InvokeVoidAsync("global.openModal", modalId);
    }




}



